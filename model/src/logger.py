import os
import keras
import time
import json


class Logger:
    def __init__(self, logdir, clear_old=True) -> None:
        '''
        Creates a logger object
        '''
        self.logdir = os.path.abspath(logdir)
        os.makedirs(self.logdir, exist_ok=True)
        if clear_old:
            self.__clear_files()

    def __output_path(self, filename):
        '''
        Returns the absolute path for a given file within configured log dir
        '''
        return os.path.join(self.logdir, filename)

    def __clear_files(self):
        """
        Clear all files generated by this module 
        """
        file = self.__output_path('plot.csv')
        if os.path.exists(file): os.remove(file)

    def log_timeseries(self, name: str, value: float, epoch: int):
        """
        Logs time series data (eg, accuracy along each epoch). CSV output
        """
        out_path = self.__output_path('plot.csv')

        if not os.path.exists(out_path):
            with open(out_path, 'w') as fd:
                fd.write('Epoch,Name,Value\r\n')

        timestamp = time.time()
        with open(out_path, 'a+') as fd:
            fd.write('%d,%s,%f,%f\r\n' % (epoch, name, value, timestamp))

    def log_metric(self, metrics: dict, filename='metrics.json'):
        """ 
        Logs a single metric (as json)
        """
        out_path = self.__output_path(filename)

        current_metric = {}
        if os.path.exists(out_path):
            with open(out_path, 'r') as fd:
                data = fd.read()
                if len(data) > 0:
                    current_metric = json.loads(data)

        current_metric.update(metrics)
        with open(out_path, 'w') as fd:
            json.dump(current_metric, fd)

    def save_model(self, model: keras.Model, filename: str):
        out_path = self.__output_path(filename)
        model.save(out_path)
